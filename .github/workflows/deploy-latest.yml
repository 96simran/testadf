name: Promote ADF Pipeline to QA using QA_ linked services

on:
  push:
    branches:
      - adf_publish

env:
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: Test-adf
  DEV_FACTORY_NAME: testing-adf-repo
  TARGET_RESOURCE_GROUP: Test-adf
  TARGET_FACTORY_NAME: QA-testing-adf
  TARGET_PIPELINE_NAME: Delete_files
  API_VERSION: 2018-06-01

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Get Azure Access Token
        id: get_token
        run: |
          ACCESS_TOKEN=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&resource=https://management.azure.com/" \
            "https://login.microsoftonline.com/$TENANT_ID/oauth2/token" | jq -r .access_token)
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Export pipeline from Dev
        env:
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
        run: |
          curl -s -X GET "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.DataFactory/factories/$DEV_FACTORY_NAME/pipelines/$TARGET_PIPELINE_NAME?api-version=$API_VERSION" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -o pipeline.json
          cat pipeline.json
          if grep -q '"error"' pipeline.json; then
            echo "Failed to export pipeline! Contents of pipeline.json:"
            cat pipeline.json
            exit 1
          fi

      - name: Replace Dev linked service with QA in pipeline JSON
        run: |
          jq 'walk(
              if type == "object" and has("linkedServiceName") and (.linkedServiceName | type == "object") and (.linkedServiceName.referenceName | startswith("Dev_")) then
                .linkedServiceName.referenceName |= sub("^Dev_"; "QA_")
              else .
              end
            )' pipeline.json > pipeline_qa_linked.json
          cat pipeline_qa_linked.json
          if grep -q '"error"' pipeline_qa_linked.json; then
            echo "Pipeline QA LinkedService JSON is not valid! Contents:"
            cat pipeline_qa_linked.json
            exit 1
          fi

      # Extract referenced QA linked services for info
      - name: Extract referenced QA linked service names
        run: |
          jq -r '.. | objects | select(has("linkedServiceName")) | .linkedServiceName.referenceName' pipeline_qa_linked.json | sort -u > used_qa_linked_services.txt
          echo "QA linked services used in pipeline:"
          cat used_qa_linked_services.txt

      # Get all datasets in QA Data Factory
      - name: Get all datasets in QA environment
        env:
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
          TARGET_RESOURCE_GROUP: ${{ env.TARGET_RESOURCE_GROUP }}
          TARGET_FACTORY_NAME: ${{ env.TARGET_FACTORY_NAME }}
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          API_VERSION: ${{ env.API_VERSION }}
        run: |
          curl -s -X GET "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$TARGET_RESOURCE_GROUP/providers/Microsoft.DataFactory/factories/$TARGET_FACTORY_NAME/datasets?api-version=$API_VERSION" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -o qa_datasets_list.json
          jq -r '.value[].name' qa_datasets_list.json | sort -u > all_qa_datasets.txt
          echo "All datasets in QA environment:"
          cat all_qa_datasets.txt

      # Get dataset definitions and filter by associated QA linked service
      - name: Get datasets associated with QA linked service(s)
        env:
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
          TARGET_RESOURCE_GROUP: ${{ env.TARGET_RESOURCE_GROUP }}
          TARGET_FACTORY_NAME: ${{ env.TARGET_FACTORY_NAME }}
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          API_VERSION: ${{ env.API_VERSION }}
        run: |
          > qa_datasets_with_qa_linked_service.txt
          while read dataset; do
            curl -s -X GET "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$TARGET_RESOURCE_GROUP/providers/Microsoft.DataFactory/factories/$TARGET_FACTORY_NAME/datasets/$dataset?api-version=$API_VERSION" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -o dataset.json
            for ls in $(cat used_qa_linked_services.txt); do
              if jq -e --arg ls "$ls" '.properties.linkedServiceName.referenceName == $ls' dataset.json > /dev/null; then
                echo "$dataset" >> qa_datasets_with_qa_linked_service.txt
              fi
            done
          done < all_qa_datasets.txt
          sort -u qa_datasets_with_qa_linked_service.txt -o qa_datasets_with_qa_linked_service.txt
          echo "QA datasets associated with QA linked service(s):"
          cat qa_datasets_with_qa_linked_service.txt

      # Deploy pipeline to QA Data Factory
      - name: Deploy pipeline to QA Data Factory
        env:
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
          TARGET_RESOURCE_GROUP: ${{ env.TARGET_RESOURCE_GROUP }}
          TARGET_FACTORY_NAME: ${{ env.TARGET_FACTORY_NAME }}
          SUBSCRIPTION_ID: ${{ env.SUBSCRIPTION_ID }}
          API_VERSION: ${{ env.API_VERSION }}
          TARGET_PIPELINE_NAME: ${{ env.TARGET_PIPELINE_NAME }}
        run: |
          curl -s -X PUT "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$TARGET_RESOURCE_GROUP/providers/Microsoft.DataFactory/factories/$TARGET_FACTORY_NAME/pipelines/$TARGET_PIPELINE_NAME?api-version=$API_VERSION" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            --data @pipeline_qa_linked.json | tee deploy_output.json
          if grep -q '"error"' deploy_output.json; then
            echo "Failed to deploy pipeline"
            cat deploy_output.json
            exit 1
          fi

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: adf_artifacts
          path: |
            pipeline.json
            pipeline_qa_linked.json
            used_qa_linked_services.txt
            all_qa_datasets.txt
            qa_datasets_with_qa_linked_service.txt